
 <!DOCTYPE html>
 <html lang="tr">


<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" /><meta name="generator" content="Docutils 0.17.1: http://docutils.sourceforge.net/" />
<meta content="Bu bölümde nesne tabanlı programlamadan söz edeceğiz." name="description" />
<meta content="python, python3, nesne, oop, sınıf, class, miras alma, inheritance, nesne yönelimli programlama, nesne tabanlı programlama, object oriented programming, self, instantiation, instance, örnek, örneklendirme, örnekleme" name="keywords" />

    <title>Nesne Tabanlı Programlama (Devamı)</title>
    <link rel="stylesheet" type="text/css" href="_static/pygments.css" />
    <link rel="stylesheet" type="text/css" href="_static/epub.css" />
<!--[if lte IE 6]>
<link rel="stylesheet" href="_static/ie6.css" type="text/css" media="screen" charset="utf-8" />
<![endif]-->

  </head><body>
<div class='header'><a href='https://yazbel.com'><img src="_static/logo.png"></a></div>

<ul class='navbar'>
    <li class="forum"><a href="http://forum.yazbel.com">forum</a></li>
    <li><a href="#"><del>pdf</a></li>
    <li><a href="#"><del>epub</a></li>
    <li><a href="#"><del>html</a></li>
</ul>



    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            

  <section id="nesne-tabanli-programlama-devami">
<h1>Nesne Tabanlı Programlama (Devamı)</h1>
<div class="admonition warning">
<p class="admonition-title">Uyarı</p>
<p>Bu makale yoğun bir şekilde geliştirilmekte, içeriği sık sık
güncellenmektedir.</p>
</div>
<p>Geçen bölümde verdiğimiz bilgiler sayesinde miras alma konusunun temelini
oluşturan taban sınıf, alt sınıf ve türeme gibi kavramlarla birlikte <code class="docutils literal notranslate"><span class="pre">super()</span></code>
ve <cite>object</cite> gibi araçların ne olduğunu ve ne işe yaradığını da öğrendik.
Dolayısıyla artık miras alma mekanizmasına dair daha renkli, daha teşvik edici
örnekler verebiliriz. Böylece, belki de gözünüze ilk bakışta pek de matah bir
şey değilmiş gibi görünen bu ‘miras alma’ denen mekanizmanın aslında ne kadar
önemli bir konu olduğuna sizleri ikna edebiliriz.</p>
<p>Bu bölümde ayrıca geçen bölümlerde incelemeye fırsat bulamasak da nesne tabanlı
programlama kapsamında incelememiz gereken başka konuları da ele alacağız.</p>
<p>Nesne tabanlı programlamadan ilk bahsettiğimiz derste, nesne tabanlı programlama
yaklaşımının grafik arayüz tasarımı için biçilmiş kaftan olduğundan söz etmiştik
hatırlarsanız. Bu bölümde inceleyeceğimiz konuların bazılarını grafik arayüz
tasarımı eşliğinde anlatacağız. Grafik arayüz programlamanın bize sunduğu
düğmeli-menülü görsel programların, nesne tabanlı programlamaya ilişkin soyut
kavramları somut bir düzleme taşımamıza imkan tanıması sayesinde, nesne tabanlı
programlamaya ilişkin çetrefilli konuları daha rahat anlama fırsatı
bulacağız.</p>
<section id="tkinter-hakkinda">
<h2>Tkinter Hakkında</h2>
<p>Hatırlarsanız, önceki derslerimizde birkaç kez Tkinter adlı bir modülden söz
etmiştik. Tkinter, Python kurulumu ile birlikte gelen ve pencereli-menülü modern
programlar yazmamızı sağlayan grafik arayüz geliştirme takımlarından biridir.</p>
<p>Tkinter bir standart kütüphane paketi olduğu için, Python programlama dilini
kurduğunuzda Tkinter de otomatik olarak kurulur<a class="footnote-reference brackets" href="#id2" id="id1">1</a>.</p>
<p>Elbette Python’da grafik arayüzlü programlar yazmamızı sağlayacak tek modül
Tkinter değildir. Bunun dışında PyQt, PyGI ve Kivy gibi alternatifler de
bulunur. Ancak Tkinter’in öteki alternatiflere karşı en büyük üstünlüğü hem
öbürlerine kıyasla çok daha kolay olması hem de Python’la birlikte gelmesidir.
PyQt, PyGI ve Kivy’yi kullanabilmek için öncelikle bunları bilgisayarınıza
kurmanız gerekir. Ayrıca Tkinter dışındaki alternatifleri kullanarak yazdığınız
programları dağıtırken, bu arayüz kütüphanelerini kullanıcılarınızın
bilgisayarına ya kendiniz kurmanız ya da kullanıcılarınızdan bu
kütüphaneleri kurmasını talep etmeniz gerekir.</p>
<p>Ben size, ilerde başka arayüz takımlarına geçiş yapacak da olsanız, Tkinter’i
mutlaka öğrenmenizi tavsiye ederim. Hem nesne tabanlı programlama hem de grafik
arayüz geliştirme kavramlarını öğrenmek açısından Tkinter son derece uygun bir
ortamdır.</p>
<p>Biz bu bölümde Tkinter modülünü kullanarak, prosedürel programlama, nesne
tabanlı programlama, sınıflar, miras alma ve nesne programlamaya ilişkin öteki
konular üzerine ufak tefek de olsa bazı çalışmalar yapacağız. Bu çalışmalar
sayesinde bir yandan öğrendiğimiz eski konulara ilişkin güzel bir pratik yapma
imkanı bulacağız, bir yandan Tkinter’in çalışmalarımızın sonucunu görsel bir
şekilde izleme imkanı sağlaması sayesinde nesne tabanlı programlamanın
çetrefilli kavramlarını anlamamız kolaylaşacak, bir yandan da ilk kez gördüğümüz
kodları anlama ve bunlar hakkında fikir yürütme kabiliyeti kazanacağız. Yani bir
taşla tamı tamına üç kuş vurmuş olacağız…</p>
</section>
<section id="prosedurel-bir-ornek">
<h2>Prosedürel Bir Örnek</h2>
<p>Başta da söylediğimiz gibi, nesne tabanlı programlama, grafik arayüzlü
programlar geliştirmek için son derece uygun bir programlama yaklaşımıdır. Zaten
kendi araştırmalarınız sırasında da, etraftaki grafik arayüzlü programların
büyük çoğunluğunun nesne tabanlı programlama yaklaşımıyla yazıldığını
göreceksiniz. Biz de bu derste vereceğimiz Tkinter örneklerinde sınıflı yapıları
kullanacağız. Ancak dilerseniz Tkinter’in nasıl bir şey olduğunu daha kolay
anlayabilmek için öncelikle nesne tabanlı yaklaşım yerine prosedürel yaklaşımı
kullanarak birkaç küçük çalışma yapalım. Zira özellikle basit kodlarda,
prosedürel yapıyı anlamak nesne tabanlı programlama yaklaşımı ile yazılmış
kodları anlamaktan daha kolaydır. Ancak tabii ki kodlar büyüyüp karmaşıklaştıkça
sınıflı yapıları kullanmak çok daha akıllıca olacaktır.</p>
<p>O halde gelin isterseniz Tkinter modülünü nasıl kullanacağımızı anlamak için,
bir metin dosyası açıp içine şu kodları yazalım:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Bu kodları herhangi bir Python programı gibi kaydedip çalıştırdığınızda boş bir
pencerenin açıldığını göreceksiniz. İşte böylece siyah komut satırından renkli
grafik arayüze geçiş yapmış oldunuz. Hadi hayırlı olsun!</p>
<p>Gördüğünüz gibi, bu kodlarda sınıfları kullanmadık. Dediğimiz gibi, ilk etapta
Tkinter’i daha iyi anlayabilmek için sınıflı yapılar yerine prosedürel bir
yaklaşımı benimseyeceğiz.</p>
<p>Burada öncelikle Tkinter modülünü içe aktardığımıza dikkat edin:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span>
</pre></div>
</div>
<p>Modülü bu şekilde içe aktardığımız için, modül içindeki nitelik ve metotlara
erişmek istediğimizde modülün adını kullanmamız gerekecek. Mesela yukarıda
modülün adını kullanarak, <cite>tkinter</cite> modülü içindeki <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfını
örnekledik:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span> <span class="o">=</span> <span class="n">tkinter</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
</pre></div>
</div>
<p>Dilerseniz içe aktarma işlemini şu şekilde yaparak işlerimizi biraz daha
kolaylaştırabiliriz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>
</pre></div>
</div>
<p>Böylece <cite>tkinter</cite> modülünün nitelik ve metotlarına ‘tkinter’ yerine ‘tk’
önekiyle erişebiliriz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
</pre></div>
</div>
<p>Yukarıdaki kodları yazdığımızda, yani <cite>tkinter</cite> modülünün <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfını
örneklediğimiz anda aslında penceremiz oluştu. Ancak bu pencere örnekleme ile
birlikte oluşmuş olsa da, Tkinter’in iç işleyişi gereği, ‘ana döngü’ adlı bir
mekanizma çalışmaya başlamadan görünür hale gelmez. İşte bu özel ana döngü
mekanizmasını çalıştırmak ve böylece oluşturduğumuz pencereyi görünür hale
getirmek için, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıf örneklerinin <code class="docutils literal notranslate"><span class="pre">mainloop()</span></code> adlı bir metodunu
çalıştıracağız:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Gördüğünüz gibi, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfını <cite>pencere</cite> adıyla örnekledikten sonra <code class="docutils literal notranslate"><span class="pre">Tk()</span></code>
sınıfının <code class="docutils literal notranslate"><span class="pre">mainloop()</span></code> adlı metoduna <cite>pencere</cite> örneği üzerinden eriştik.</p>
<p>Bu ana döngü mekanizmasının benzerlerini Tkinter’in dışındaki öbür grafik arayüz
tasarım araçlarında da göreceksiniz.</p>
<p>Bu arada, yukarıdaki prosedürel örnekte bile, biz istemesek de sınıflarla
muhatap olduğumuza dikkatinizi çekmek isterim. Çünkü kullandığımız <cite>tkinter</cite>
modülünün kendisi halihazırda birtakım sınıflardan oluşuyor. Dolayısıyla bu
modülü içe aktardığımızda, kodlarımızın içine pek çok sınıfı ister istemez dahil
etmiş oluyoruz. Esasında sırf bu durum bile, grafik arayüzlü programlarda neden
nesne tabanlı programlamanın tercih edildiğini gayet güzel gösteriyor bize.
Neticede, kullandığımız harici kaynaklardan ötürü her şekilde sınıflarla ve
nesne tabanlı yapılarla içli dışlı olacağımız için, kendi yazdığımız kodlarda da
nesne tabanlı yapılardan kaçmamızın hiçbir gerekçesi yok.</p>
<p>Neyse… Biz konumuza dönelim…</p>
<p>Yukarıda Tkinter modülünü kullanarak boş bir pencere oluşturduk. Gelin
isterseniz bu boş pencere üzerinde birtakım değişiklikler yapalım.</p>
<p>Öncelikle <cite>tkinter</cite> modülümüzü içe aktaralım:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>
</pre></div>
</div>
<p>Şimdi bu modülün <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> adlı sınıfını örnekleyelim:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
</pre></div>
</div>
<p>Böylece penceremizi oluşturmuş olduk. Tkinter’le verdiğimiz ilk örnekte de
gördüğünüz gibi, Tkinter’le oluşturulan boş bir pencere öntanımlı olarak 200
piksel genişliğe ve 200 piksel yüksekliğe sahip olacaktır. Ancak isterseniz,
<code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfının <code class="docutils literal notranslate"><span class="pre">geometry()</span></code> adlı metodunu kullanarak, pencere boyutunu
ayarlayabilirsiniz (<code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfının hangi metotlara sahip olduğunu görmek
için <code class="docutils literal notranslate"><span class="pre">dir(pencere)</span></code> komutunu verebileceğinizi biliyorsunuz):</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
<span class="n">pencere</span><span class="o">.</span><span class="n">geometry</span><span class="p">(</span><span class="s1">&#39;200x70&#39;</span><span class="p">)</span>

<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Kendi yazdığımız sınıflardaki nitelik ve metotlara nasıl erişiyorsak, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code>
sınıfının nitelik ve metotlarına da aynı şekilde eriştiğimize dikkat edin.
Neticede bizim yazdıklarımız da sınıftır, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> da sınıftır. <code class="docutils literal notranslate"><span class="pre">Tk()</span></code>
sınıfının bizimkilerden tek farkı, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfının Python geliştiricilerince
yazılmış olmasıdır. Yazarları farklı olsa da bütün sınıflar aynı kurallara
tabidir. Dolayısıyla ilgili sınıfı kullanabilmek için önce sınıfımızı
örnekliyoruz, ardından da bu sınıf içinde tanımlı olan nitelik ve metotlara
noktalı gösterim tekniğini kullanarak ulaşıyoruz. Burada da <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıf
örneklerinin <code class="docutils literal notranslate"><span class="pre">geometry()</span></code> metodunu kullanarak 200x200 yerine 200x70
boyutlarında bir pencere oluşturduk:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span><span class="o">.</span><span class="n">geometry</span><span class="p">(</span><span class="s1">&#39;200x70&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Şimdi bu boş pencereye bir etiket bir de düğme ekleyelim:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
<span class="n">pencere</span><span class="o">.</span><span class="n">geometry</span><span class="p">(</span><span class="s1">&#39;200x70&#39;</span><span class="p">)</span>

<span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
<span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Tamam&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">pencere</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>
<span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Burada <cite>tkinter</cite> modülünün <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfına ek olarak, aynı modülün <code class="docutils literal notranslate"><span class="pre">Label()</span></code>
ve <code class="docutils literal notranslate"><span class="pre">Button()</span></code> adlı iki sınıfını daha kullandık. <code class="docutils literal notranslate"><span class="pre">Label()</span></code> sınıfı etiketler,
<code class="docutils literal notranslate"><span class="pre">Button()</span></code> sınıfı ise düğmeler oluşturmamızı sağlıyor. Bu sınıfların örnekleri
üzerinde çalıştırdığımız <code class="docutils literal notranslate"><span class="pre">pack()</span></code> metodunu ise, etiket ve düğmeleri pencere
üzerine yerleştirmek için kullanıyoruz.</p>
<p><code class="docutils literal notranslate"><span class="pre">Label()</span></code> ve <code class="docutils literal notranslate"><span class="pre">Button()</span></code> sınıflarının <cite>text</cite> adlı bir parametre aldığını
görüyorsunuz. Bu parametrenin değeri, etiket veya düğmenin üzerinde ne
yazacağını gösteriyor.</p>
<p>Bu kodları da tıpkı başka Python programlarını çalıştırdığınız gibi
çalıştırabilirsiniz.</p>
<p>Bu arada, Tkinter’de bir şeyi oluşturmanın ve görünür hale getirmenin iki farklı
işlem gerektirdiğine özellikle dikkat edin. Mesela üzerinde ‘Merhaba Zalim
Dünya’ yazan bir etiket oluşturmak için şu kodu kullanıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
</pre></div>
</div>
<p>Bu etiketi pencere üzerine yerleştirmek, yani görünür hale getirmek için ise şu
komutu kullanıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>
</pre></div>
</div>
<p>Aynı şekilde bir düğme oluşturmak için de şu komutu kullanıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Tamam&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">pencere</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>
</pre></div>
</div>
<p>Böylece üzerinde ‘Tamam’ yazan ve tıklandığında pencereyi kapatan bir düğme
oluşturmuş oluyoruz. Düğmenin üzerine tıklandığında ne olacağını <code class="docutils literal notranslate"><span class="pre">Button()</span></code>
sınıfının <cite>command</cite> parametresi aracılığıyla belirledik. Bu parametreye,
<cite>pencere</cite> örneğinin <code class="docutils literal notranslate"><span class="pre">destroy()</span></code> metodunu verdiğimizde pencereye kapatma
sinyali gönderilecektir. Yalnız bu metodu yazarken parantez işaretlerini
kullanmadığımıza dikkat edin. Eğer metodu <code class="docutils literal notranslate"><span class="pre">pencere.destroy()</span></code> şeklinde
parantezli bir biçimde yazarsak, kapatma komutu daha düğmeye basmadan çalışacak
ve bu durumda düğmemiz düzgün işlemeyecektir.</p>
<p>Tıpkı etikette olduğu gibi, düğmemizi de pencere üzerine yerleştirmek, yani
görünür hale getirmek için <code class="docutils literal notranslate"><span class="pre">pack()</span></code> metodundan yararlanıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>
</pre></div>
</div>
<p>Bunun, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfı ile <code class="docutils literal notranslate"><span class="pre">mainloop()</span></code> metodu arasındaki ilişkiye benzediğine
dikkatinizi çekmek isterim: Tıpkı <code class="docutils literal notranslate"><span class="pre">pack()</span></code> metoduna benzer bir şekilde,
<code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfı yardımıyla da bir pencere oluşturduktan sonra, bu pencerenin
görünür hale gelebilmesi için <code class="docutils literal notranslate"><span class="pre">mainloop()</span></code> metodunu çalıştırmamız gerektiğini
hatırlıyorsunuz.</p>
<p>Bu kodlarda Tkinter’e ilişkin ayrıntılardan ziyade, sınıflı yapıları kodlarımıza
nasıl dahil ettiğimize ve bunları nasıl kullandığımıza odaklanmanızı istiyorum.
Gördüğünüz gibi, <cite>tkinter</cite> modülünden içe aktardığımız <code class="docutils literal notranslate"><span class="pre">Tk()</span></code>, <code class="docutils literal notranslate"><span class="pre">Label()</span></code> ve
<code class="docutils literal notranslate"><span class="pre">Button()</span></code> gibi sınıfların metot ve niteliklerini, mesela tıpkı karakter
dizilerinin metot ve niteliklerini kullanır gibi kullanıyoruz.</p>
<p>Yukarıdaki örnekte, <cite>tkinter</cite> modülünün sınıflarını, kodlarımız içine prosedürel
olarak dahil ettik. Yani her sınıfı, belli bir sıraya göre kodlarımız içinde
belirtip, bunları adım adım çalıştırdık. Prosedürel programlamada kodların
yazılış sırası çok önemlidir. Bunu kanıtlamak için çok basit bir örnek verelim:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">çıkış</span><span class="p">():</span>
    <span class="n">etiket</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Elveda zalim dünya...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Bekleyin...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;disabled&#39;</span>
    <span class="n">pencere</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="n">pencere</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>

<span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
<span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Çık&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">çıkış</span><span class="p">)</span>
<span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">pencere</span><span class="o">.</span><span class="n">protocol</span><span class="p">(</span><span class="s1">&#39;WM_DELETE_WINDOW&#39;</span><span class="p">,</span> <span class="n">çıkış</span><span class="p">)</span>

<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Burada her zamanki gibi öncelikle gerekli modülü içe aktardık:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>
</pre></div>
</div>
<p>Daha sonra <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfı yardımıyla penceremizi oluşturduk:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
</pre></div>
</div>
<p>Ardından <code class="docutils literal notranslate"><span class="pre">çıkış()</span></code> adlı bir fonksiyon tanımladık:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">çıkış</span><span class="p">():</span>
    <span class="n">etiket</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Elveda zalim dünya...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Bekleyin...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;disabled&#39;</span>
    <span class="n">pencere</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="n">pencere</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>
</pre></div>
</div>
<p>Bu fonksiyon, pencere kapatılırken hangi işlemlerin yapılacağını belirliyor.
Buna göre, programdan çıkılırken sırasıyla şu işlemleri gerçekleştiriyoruz:</p>
<ol class="arabic simple">
<li><p>Etiketin <cite>text</cite> parametresini ‘Elveda zalim dünya…’ olarak değiştiriyoruz.</p></li>
<li><p>Düğmenin <cite>text</cite> parametresini ‘Bekleyin…’ olarak değiştiriyoruz.</p></li>
<li><p>Düğmenin <cite>state</cite> parametresini ‘disabled’ olarak değiştirerek düğmeyi basılamaz
hale getiriyoruz.</p></li>
<li><p>2000 milisaniye (yani 2 saniye) sonra ise <code class="docutils literal notranslate"><span class="pre">pencere.destroy()</span></code> komutunu
işleterek pencerenin kapanmasını sağlıyoruz.</p></li>
</ol>
<p><code class="docutils literal notranslate"><span class="pre">çıkış()</span></code> fonksiyonunu tanımladıktan sonra <code class="docutils literal notranslate"><span class="pre">Label()</span></code> ve <code class="docutils literal notranslate"><span class="pre">Button()</span></code>
düğmeleri aracılığıyla etiket ve düğmelerimizi oluşturuyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
<span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Çık&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">çıkış</span><span class="p">)</span>
<span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>
</pre></div>
</div>
<p>Buna göre, düğmeye basıldığında, <cite>command</cite> parametresinin değeri olan
<code class="docutils literal notranslate"><span class="pre">çıkış()</span></code> fonksiyonu çalışmaya başlayacak ve fonksiyon gövdesinde
tanımladığımız işlemler gerçekleşecek.</p>
<p>Bildiğiniz gibi, bir program penceresinde, o programı kapatmayı sağlayacak
düğmelerin yanı sıra, bir de en üst sağ (veya sol) köşede program penceresini
kapatan bir ‘X’ düğmesi bulunur. İşte bu ‘X’ düğmesine basıldığında da pencere
kapanmadan önce <code class="docutils literal notranslate"><span class="pre">çıkış()</span></code> fonksiyonunun çalışması için şu kodu yazıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span><span class="o">.</span><span class="n">protocol</span><span class="p">(</span><span class="s1">&#39;WM_DELETE_WINDOW&#39;</span><span class="p">,</span> <span class="n">çıkış</span><span class="p">)</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">protocol()</span></code> de tıpkı <code class="docutils literal notranslate"><span class="pre">geometry()</span></code> gibi, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfının metotlarından
biridir. Bu metodu <cite>WM_DELETE_WINDOW</cite> argümanıyla birlikte kullanarak, pencere
üzerindeki ‘X’ düğmesine basıldığında neler olacağını tanımlayabiliyoruz.</p>
<p>Son olarak da ana döngü mekanizmasını çalıştırıyoruz ve penceremizi görünür hale
getiriyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Bu prosedürel kodları tekrar önümüze alalım:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">çıkış</span><span class="p">():</span>
    <span class="n">etiket</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Elveda zalim dünya...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Bekleyin...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;disabled&#39;</span>
    <span class="n">pencere</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="n">pencere</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>

<span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
<span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Çık&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">çıkış</span><span class="p">)</span>
<span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">pencere</span><span class="o">.</span><span class="n">protocol</span><span class="p">(</span><span class="s1">&#39;WM_DELETE_WINDOW&#39;</span><span class="p">,</span> <span class="n">çıkış</span><span class="p">)</span>

<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>En başta da söylediğimiz gibi, bu kodlarda, satır sıraları çok önemlidir. Mesela
burada düğmeyi oluşturan kodlarla <code class="docutils literal notranslate"><span class="pre">pencere.protocol()</span></code> kodlarının çalışması
için bunların mutlaka <code class="docutils literal notranslate"><span class="pre">çıkış()</span></code> fonksiyonu tanımlandıktan sonra yazılması
gerekir. Eğer bu kodları şöyle yazarsanız:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">()</span>
<span class="n">pencere</span><span class="o">.</span><span class="n">protocol</span><span class="p">(</span><span class="s1">&#39;WM_DELETE_WINDOW&#39;</span><span class="p">,</span> <span class="n">çıkış</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">çıkış</span><span class="p">():</span>
    <span class="n">etiket</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Elveda zalim dünya...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Bekleyin...&#39;</span>
    <span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;disabled&#39;</span>
    <span class="n">pencere</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="n">pencere</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>

<span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
<span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Çık&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="n">çıkış</span><span class="p">)</span>
<span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>… programınız çalışmayacaktır.</p>
<p>Bu durum, programcıyı, istediği kod düzenini oturtmak konusunda epey kısıtlar.
Ama eğer nesne tabanlı programlama yaklaşımını kullanırsak kod akışını
belirlerken daha özgür olabiliriz. Ayrıca prosedürel yaklaşımda kodlar büyüdükçe
programınızın çorbaya dönme ihtimali nesne tabanlı programlama yaklaşımına göre
daha fazladır. Ancak elbette nesne tabanlı programlama yaklaşımını kullanmak tek
başına düzgün ve düzenli kod yazmanın teminatı değildir. Nesne tabanlı
programlama yaklaşımını kullanarak da gayet sebze çorbası kıvamında kodlar
yazabilirsiniz. En başta da söylediğimiz gibi, nesne tabanlı programlama bir
seçenektir. Eğer istemezseniz, nesne tabanlı programlama yaklaşımını kullanmak
zorunda değilsiniz. Ama elinizde böyle bir imkanınız olduğunu ve başkalarının da
bu yaklaşımdan yoğun bir şekilde faydalandığını bilmek çok önemlidir.</p>
</section>
<section id="sinifli-bir-ornek">
<h2>Sınıflı Bir Örnek</h2>
<p>Bir önceki başlıkta Tkinter’i kullanılarak prosedürel bir kod yazdık. Peki acaba
yukarıdaki kodları nesne tabanlı olarak nasıl yazabiliriz?</p>
<p>Dikkatlice bakın:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>

<span class="k">class</span> <span class="nc">Pencere</span><span class="p">(</span><span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">protocol</span><span class="p">(</span><span class="s1">&#39;WM_DELETE_WINDOW&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">çıkış</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Çık&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">çıkış</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">çıkış</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">etiket</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Elveda zalim dünya...&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Bekleyin...&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;disabled&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">Pencere</span><span class="p">()</span>
<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Bu kodlarda gördüğünüz bütün satırları anlayacak kadar nesne tabanlı programlama
bilgisine sahipsiniz. Ama gelin biz yine de bu kodları sizin için tek tek ve
tane tane açıklayalım.</p>
<p>Öncelikle <cite>tkinter</cite> modülünü <cite>tk</cite> adıyla içe aktarıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>
</pre></div>
</div>
<p>Daha sonra <code class="docutils literal notranslate"><span class="pre">Pencere()</span></code> adlı sınıfımızı tanımlamaya başlıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Pencere</span><span class="p">(</span><span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">):</span>
    <span class="o">...</span>
</pre></div>
</div>
<p>Burada öncelikle <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfını miras aldığımıza dikkat edin. Bu sayede bu
sınıfın içindeki bütün nitelik ve metotları kendi uygulamamız içinden
çağırabileceğiz.</p>
<p>Penceremiz oluşur oluşmaz pencere üzerinde bir etiket ile bir düğme olmasını
planlıyoruz. Pencere oluşur oluşmaz işletilecek kodları tanımlamak için bir
<code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metoduna ihtiyacımız olduğunu biliyorsunuz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Pencere</span><span class="p">(</span><span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="o">...</span>
</pre></div>
</div>
<p>Ancak kendi <code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodumuzu tanımlarken, <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfının kendi
<code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodundaki işlemleri de gölgelemememiz lazım. Dolayısıyla
orijinal <code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodunu kendi <code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodumuza aktarmak için
<code class="docutils literal notranslate"><span class="pre">super()</span></code> fonksiyonundan yararlanacağız:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Pencere</span><span class="p">(</span><span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
</pre></div>
</div>
<p>Artık taban sınıfın <code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodunu kendi tanımladığımız alt sınıfın
<code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodu içinden özelleştirmeye başlayabiliriz. Öncelikle şu satırı
yazıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="bp">self</span><span class="o">.</span><span class="n">protocol</span><span class="p">(</span><span class="s1">&#39;WM_DELETE_WINDOW&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">çıkış</span><span class="p">)</span>
</pre></div>
</div>
<p><code class="docutils literal notranslate"><span class="pre">protocol()</span></code> metodunun öntanımlı davranışı, pencerenin ‘X’ düğmesine
basıldığında programı sonlandırmaktır. İşte biz bu öntanımlı davranışı
değiştirmek için <code class="docutils literal notranslate"><span class="pre">protocol()</span></code> metodunu içeren kodu tekrar tanımlıyoruz ve
‘X’ düğmesine basıldığında <code class="docutils literal notranslate"><span class="pre">çıkış()</span></code> fonksiyonunun çalışmasını sağlıyoruz.</p>
<p>Daha sonra normal bir şekilde etiketimizi ve düğmemizi tanımlıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="bp">self</span><span class="o">.</span><span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

<span class="bp">self</span><span class="o">.</span><span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Çık&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">çıkış</span><span class="p">)</span>
<span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>
</pre></div>
</div>
<p>İki farklı yerde atıfta bulunduğumuz <code class="docutils literal notranslate"><span class="pre">çıkış()</span></code> fonksiyonumuz ise şöyle:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">def</span> <span class="nf">çıkış</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">etiket</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Elveda zalim dünya...&#39;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Bekleyin...&#39;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;disabled&#39;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>
</pre></div>
</div>
<p>Son olarak da şu kodları yazıp programımızı tamamlıyoruz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">pencere</span> <span class="o">=</span> <span class="n">Pencere</span><span class="p">()</span>
<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Elbette zevkler ve renkler tartışılmaz, ancak ben yukarıdaki kodları, prosedürel
kodlara göre çok daha düzgün, düzenli, anlaşılır ve okunaklı bulduğumu, bu
kodlara baktığımda, programı oluşturan parçaların prosedürel kodlara kıyasla
daha yerli yerinde olduğunu düşündüğümü söylemeden de geçmeyeceğim…</p>
<p>Eğer siz aksini düşünüyorsanız sizi prosedürel yolu tercih etmekten alıkoyan
hiçbir şeyin olmadığını da bilin. Ancak tabii ki bu, nesne tabanlı
programlamadan kaçabileceğiniz anlamına da gelmiyor! Unutmayın, bu yaklaşımı siz
kullanmasanız da başkaları kullanıyor.</p>
</section>
<section id="coklu-miras-alma">
<h2>Çoklu Miras Alma</h2>
<p>Python’da bir sınıf, aynı anda birden fazla sınıfı da miras alabilir. Eğer
yazdığınız bir uygulamada birden fazla taban sınıftan nitelik ve metot miras
almanız gerekirse bunu şu şekilde gerçekleştirebilirsiniz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">Sınıf</span><span class="p">(</span><span class="n">taban_sınıf1</span><span class="p">,</span> <span class="n">taban_sınıf2</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
</div>
<p>Bu şekilde hem <cite>taban_sınıf1</cite> hem de <cite>taban_sınıf2</cite>’de bulunan nitelik ve
metotlar aynı anda <cite>Sınıf</cite> adlı sınıfa dahil olacaktır.</p>
<p>Ufak bir örnek verelim. Diyelim ki elimizde şu sınıflar var:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">c1</span><span class="p">:</span>
    <span class="n">sn1</span> <span class="o">=</span> <span class="s1">&#39;sn1&#39;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ön1</span> <span class="o">=</span> <span class="s1">&#39;ön1&#39;</span>
        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ön1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">örn_metot1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">öm1</span> <span class="o">=</span> <span class="s1">&#39;öm1&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">öm1</span>

<span class="k">class</span> <span class="nc">c2</span><span class="p">:</span>
    <span class="n">sn2</span> <span class="o">=</span> <span class="s1">&#39;sn2&#39;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ön2</span> <span class="o">=</span> <span class="s1">&#39;ön2&#39;</span>
        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ön2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">örn_metot2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">öm2</span> <span class="o">=</span> <span class="s1">&#39;öm2&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">öm2</span>

<span class="k">class</span> <span class="nc">c3</span><span class="p">:</span>
    <span class="n">sn3</span> <span class="o">=</span> <span class="s1">&#39;sn3&#39;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ön3</span> <span class="o">=</span> <span class="s1">&#39;ön3&#39;</span>
        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ön3</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">örn_metot3</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">öm3</span> <span class="o">=</span> <span class="s1">&#39;öm3&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">öm3</span>
</pre></div>
</div>
<p>Burada üç farklı sınıf ve her bir sınıfın içinde de birer sınıf niteliği, birer
<code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodu, birer örnek niteliği ve birer örnek metodu görüyoruz.</p>
<p>Şimdi bu üç sınıfı birden taban sınıf olarak miras alan dördüncü bir sınıf
tanımlayalım:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">c4</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">):</span>
    <span class="k">pass</span>
</pre></div>
</div>
<p>Burada, taban sınıf vazifesi görecek sınıfların adını <code class="docutils literal notranslate"><span class="pre">c4</span></code> sınıfının
parantezleri arasına tek tek yerleştirdiğimize dikkat edin. Bu şekilde <code class="docutils literal notranslate"><span class="pre">c1</span></code>,
<code class="docutils literal notranslate"><span class="pre">c2</span></code> ve <code class="docutils literal notranslate"><span class="pre">c3</span></code> adlı sınıfları aynı anda miras almış oluyoruz. İşte bu
mekanizmaya Python’da çoklu miras alma (<em>multiple inheritance</em>) adı veriliyor.</p>
<p>Tek bir sınıfı miras aldığınızda hangi kurallar geçerliyse, birden fazla sınıfı
miras aldığınızda da temel olarak aynı kurallar geçerlidir. Ancak çoklu miras
almada birden fazla sınıf söz konusu olduğu için, miras alınan sınıfların da
kendi aralarında veya başka sınıflarla nitelik ve/veya metot alışverişi yapması
halinde ortaya çıkabilecek beklenmedik durumlara karşı dikkatli olmalısınız.
Ayrıca çoklu miras alma işlemi sırasında, aynı adı taşıyan metotlardan yalnızca
birinin miras alınacağını da unutmayın.</p>
<p>Örneğin:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">c1</span><span class="p">:</span>
    <span class="n">sn1</span> <span class="o">=</span> <span class="s1">&#39;sn1&#39;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ön1</span> <span class="o">=</span> <span class="s1">&#39;ön1&#39;</span>
        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ön1</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">örn_metot1</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">öm1</span> <span class="o">=</span> <span class="s1">&#39;öm1&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">öm1</span>

    <span class="k">def</span> <span class="nf">ortak_metot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">om</span> <span class="o">=</span> <span class="s1">&#39;ortak metot_c1&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">om</span>

<span class="k">class</span> <span class="nc">c2</span><span class="p">:</span>
    <span class="n">sn2</span> <span class="o">=</span> <span class="s1">&#39;sn2&#39;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ön2</span> <span class="o">=</span> <span class="s1">&#39;ön2&#39;</span>
        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ön2</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">örn_metot2</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">öm2</span> <span class="o">=</span> <span class="s1">&#39;öm2&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">öm2</span>

    <span class="k">def</span> <span class="nf">ortak_metot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">om</span> <span class="o">=</span> <span class="s1">&#39;ortak metot_c2&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">om</span>

<span class="k">class</span> <span class="nc">c3</span><span class="p">:</span>
    <span class="n">sn3</span> <span class="o">=</span> <span class="s1">&#39;sn3&#39;</span>

    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">ön3</span> <span class="o">=</span> <span class="s1">&#39;ön3&#39;</span>
        <span class="nb">print</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">ön3</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">örn_metot3</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">öm3</span> <span class="o">=</span> <span class="s1">&#39;öm3&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">öm3</span>

    <span class="k">def</span> <span class="nf">ortak_metot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">om</span> <span class="o">=</span> <span class="s1">&#39;ortak metot_c3&#39;</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">om</span>

<span class="k">class</span> <span class="nc">c4</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
</pre></div>
</div>
<p>Burada, aynı adı taşıyan <code class="docutils literal notranslate"><span class="pre">__init__()</span></code> ve <code class="docutils literal notranslate"><span class="pre">ortak_metot()</span></code> adlı metotlardan
yalnızca biri miras alınacaktır. Bunlardan hangisinin miras alınacağını az çok
tahmin etmişsinizdir. Evet, doğru bildiniz. Miras alma listesinde hangi sınıf
önde geliyorsa onun metotları miras alınacaktır:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="n">s</span> <span class="o">=</span> <span class="n">c4</span><span class="p">()</span>
<span class="nb">print</span><span class="p">(</span><span class="n">s</span><span class="o">.</span><span class="n">ortak_metot</span><span class="p">())</span>
</pre></div>
</div>
<p>Gördüğünüz gibi, <code class="docutils literal notranslate"><span class="pre">c4()</span></code> sınıfı önce <code class="docutils literal notranslate"><span class="pre">c1</span></code> sınıfını miras aldığı için hep
<code class="docutils literal notranslate"><span class="pre">c1</span></code> sınıfının metotları öncelik kazanıyor.</p>
<p>Eğer sınıfları <code class="docutils literal notranslate"><span class="pre">class</span> <span class="pre">c4(c2,</span> <span class="pre">c3,</span> <span class="pre">c1):</span></code> şeklinde miras alsaydık, bu kez de
<code class="docutils literal notranslate"><span class="pre">c2</span></code> sınıfının metotları öncelik kazanacaktı.</p>
<p>Elbette, Python’ın sizin için belirlediği öncelik sırası yerine kendi
belirlediğiniz öncelik sırasını da dayatabilirsiniz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="k">class</span> <span class="nc">c4</span><span class="p">(</span><span class="n">c1</span><span class="p">,</span> <span class="n">c2</span><span class="p">,</span> <span class="n">c3</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="n">c2</span><span class="o">.</span><span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>

    <span class="k">def</span> <span class="nf">ortak_metot</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="k">return</span> <span class="n">c3</span><span class="o">.</span><span class="n">ortak_metot</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
</pre></div>
</div>
<p>Burada <code class="docutils literal notranslate"><span class="pre">c2</span></code> sınıfının <code class="docutils literal notranslate"><span class="pre">__init__()</span></code> metodu ile <code class="docutils literal notranslate"><span class="pre">c3</span></code> sınıfının
<code class="docutils literal notranslate"><span class="pre">ortak_metot</span></code>’una miras önceliği verdik.</p>
</section>
<section id="dahil-etme">
<h2>Dahil Etme</h2>
<p>Bir sınıftaki nitelik ve metotları başka bir sınıf içinde kullanmanın tek yolu
ilgili sınıf veya sınıfları miras almak değildir. Hatta bazı durumlarda, miras
alma iyi bir yöntem dahi olmayabilir. Özellikle birden fazla sınıfa ait nitelik
ve metotlara ihtiyaç duyduğumuzda, çoklu miras alma yöntemini kullanmak yerine,
dahil etme (<em>composition</em>) denen yöntemi tercih edebiliriz.</p>
<p>Peki nedir bu dahil etme denen şey? Adından da anlaşılacağı gibi, dahil etme
yönteminde, taban sınıfın nitelik ve metotlarını miras almak yerine, alt sınıf
içine dahil ediyoruz. Esasında biz bunun örneğini görmüştük. Şu kodu
hatırlıyorsunuz:</p>
<div class="highlight-py3 notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="nn">tkinter</span> <span class="k">as</span> <span class="nn">tk</span>

<span class="k">class</span> <span class="nc">Pencere</span><span class="p">(</span><span class="n">tk</span><span class="o">.</span><span class="n">Tk</span><span class="p">):</span>
    <span class="k">def</span> <span class="fm">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="nb">super</span><span class="p">()</span><span class="o">.</span><span class="fm">__init__</span><span class="p">()</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">protocol</span><span class="p">(</span><span class="s1">&#39;WM_DELETE_WINDOW&#39;</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">çıkış</span><span class="p">)</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">etiket</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Label</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Merhaba Zalim Dünya&#39;</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">etiket</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span> <span class="o">=</span> <span class="n">tk</span><span class="o">.</span><span class="n">Button</span><span class="p">(</span><span class="n">text</span><span class="o">=</span><span class="s1">&#39;Çık&#39;</span><span class="p">,</span> <span class="n">command</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">çıkış</span><span class="p">)</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="o">.</span><span class="n">pack</span><span class="p">()</span>

    <span class="k">def</span> <span class="nf">çıkış</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">etiket</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Elveda zalim dünya...&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;text&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;Bekleyin...&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">düğme</span><span class="p">[</span><span class="s1">&#39;state&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="s1">&#39;disabled&#39;</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">after</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">destroy</span><span class="p">)</span>

<span class="n">pencere</span> <span class="o">=</span> <span class="n">Pencere</span><span class="p">()</span>
<span class="n">pencere</span><span class="o">.</span><span class="n">mainloop</span><span class="p">()</span>
</pre></div>
</div>
<p>Burada aynı anda hem miras alma hem de dahil etme yönteminden yararlanıyoruz.
İlk önce <code class="docutils literal notranslate"><span class="pre">Tk()</span></code> sınıfını miras aldık. Böylece bu sınıfın nitelik ve
metotlarına doğrudan erişim elde ettik. Etiket ve düğme oluşturmamızı sağlayan
<code class="docutils literal notranslate"><span class="pre">Label()</span></code> ve <code class="docutils literal notranslate"><span class="pre">Button()</span></code> sınıflarını ise <code class="docutils literal notranslate"><span class="pre">Pencere()</span></code> sınıfımız içine dahil
ettik. Böylece bu sınıfların nitelik ve metotlarına sırasıyla <cite>self.etiket</cite> ve
<cite>self.düğme</cite> adları altında erişim kazandık.</p>
<p>Miras alma ve dahil etme yöntemleri arasında tercih yaparken genel yaklaşımımız
şu olacak: Eğer yazdığımız uygulama, bir başka sınıfın türevi ise, o sınıfı
miras alacağız. Ama eğer bir sınıf, yazdığımız uygulamanın bir parçası ise o
sınıfı uygulamamıza dahil edeceğiz.</p>
<p>Yani mesela yukarıdaki örnekte temel olarak yaptığımız şey bir uygulama
penceresi tasarlamaktır. Dolayısıyla uygulama penceremiz, <code class="docutils literal notranslate"><span class="pre">tk.Tk()</span></code> sınıfının
doğrudan bir türevidir. O yüzden bu sınıfı miras almayı tercih ediyoruz.</p>
<p>Pencere üzerine etiket ve düğme yerleştirmemizi sağlayan <code class="docutils literal notranslate"><span class="pre">Label()</span></code> ve
<code class="docutils literal notranslate"><span class="pre">Button()</span></code> sınıfları ise, uygulama penceresinin birer parçasıdır. Dolayısıyla
bu sınıfları uygulamamızın içine dahil ediyoruz.</p>
<p>Yukarıda anlattığımız iki farklı ilişki türü ‘olma ilişkisi’ (<em>is-a
relationship</em>) ve ‘sahiplik ilişkisi’ (<em>has-a relationship</em>) olarak
adlandırılabilir. Olma ilişkisinde, bir sınıf ötekinin türevidir. Sahip olma
ilişkisinde ise bir sınıf öteki sınıfın parçasıdır. Eğer iki sınıf arasında
‘olma ilişkisi’ varsa miras alma yöntemini kullanıyoruz. Ama eğer iki sınıf
arasında ‘sahiplik ilişkisi’ varsa dahil etme yöntemini kullanıyoruz.</p>
<p class="rubric">Dipnotları:</p>
<dl class="footnote brackets">
<dt class="label" id="id2"><span class="brackets"><a class="fn-backref" href="#id1">1</a></span></dt>
<dd><p>GNU/Linux dağıtımlarında, dağıtımı geliştiren ekip genellikle
Tkinter paketini Python paketinden ayırdığı için, Tkinter’i ayrıca kurmanız
gerekebilir. Eğer Python’ın etkileşimli kabuğunda <code class="docutils literal notranslate"><span class="pre">import</span> <span class="pre">tkinter</span></code> komutunu
verdiğinizde bir hata mesajı alıyorsanız <a class="reference external" href="https://forum.yazbel.com/">https://forum.yazbel.com/</a>
adresinden yardım isteyin. Eğer Windows kullanıyorsanız, böyle bir probleminiz
yok. Python’ı kurduğunuz anda Tkinter de emrinize amadedir.</p>
</dd>
</dl>
</section>
</section>



<div class='glyph'><a href='https://yazbel.com'>&#x2663;</a></div>
<div class='extrarelbar'> 
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Gezinti</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.xhtml" title="Genel Dizin"
             accesskey="I">dizin</a></li>
        <li class="right" >
          <a href="nesne_tabanli_programlama7.xhtml" title="Nesne Tabanlı Programlama (Devamı)"
             accesskey="N">sonraki</a> |</li>
        <li class="right" >
          <a href="nesne_tabanli_programlama5.xhtml" title="Nesne Tabanlı Programlama (Devamı)"
             accesskey="P">önceki</a> |</li>
<li class="nav-item nav-item-0"><a href=".">&#x2302;</a></li>

        <li class="nav-item nav-item-this"><a href="">Nesne Tabanlı Programlama (Devamı)</a></li> 
      </ul>
    </div> </div>

<div class='addcomment'>Yorumlar</div>

<div class='how-to-use'>
<h3>Önemli Not</h3>
Eğer yazdığınız yorum içinde kod kullanacaksanız kodlarınızı
<span class='tag'>&lt;pre&gt;&lt;code&gt;</span> etiketleri içine alın. Örneğin:

<pre>
    <span class='tag'>&lt;pre&gt;&lt;code class="python"&gt;</span>
    <span class='keyword'>print</span>(<span class='string'>"Merhaba Dünya!"</span>)
    <span class='tag'>&lt;/code&gt;&lt;/pre&gt;</span>
</pre>

Sorularınızı yorumlarda dile getirmek yerine <a href="https://forum.yazbel.com/">Yazbel Forumu</a>nda sorarsanız çok daha hızlı cevap alabilirsiniz.
</div>

<div id="disqus_thread"></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES * * */
    var disqus_shortname = 'istihza';

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>

<noscript>
<br>
<a href="https://disqus.com/?ref_noscript" rel="nofollow">Disqus tarafından sağlanan yorumları</a> görmek için lütfen JavasScript'i etkinleştirin.
<br>
Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript" rel="nofollow">comments powered by Disqus.</a>
</noscript>
<script type="text/javascript" src="//s7.addthis.com/js/300/addthis_widget.js#pubid=ra-4eca48eb2d83faf9" async="async"></script>



            <div class="clearer"></div>
          </div>
      </div>
      <div class="clearer"></div>
    </div> 
    <div class="related" role="navigation" aria-label="related navigation">
      <h3>Gezinti</h3>
      <ul>
        <li class="right" style="margin-right: 10px">
          <a href="genindex.xhtml" title="Genel Dizin"
             >dizin</a></li>
        <li class="right" >
          <a href="nesne_tabanli_programlama7.xhtml" title="Nesne Tabanlı Programlama (Devamı)"
             >sonraki</a> |</li>
        <li class="right" >
          <a href="nesne_tabanli_programlama5.xhtml" title="Nesne Tabanlı Programlama (Devamı)"
             >önceki</a> |</li>
<li class="nav-item nav-item-0"><a href=".">&#x2302;</a></li>

        <li class="nav-item nav-item-this"><a href="">Nesne Tabanlı Programlama (Devamı)</a></li> 
      </ul>
    </div> 

<div class="footer">
		&copy; Copyright 2021, Yazbel Belgelendirme Projesi | <a href="https://yazbel.com">yazbel.com</a>.
Son güncelleme: 03.10.2021.
	<a href="http://sphinx-doc.org/">Sphinx</a> 4.2.0 kullanılarak oluşturuldu.
<br>
<br>
<a rel="license" href="http://creativecommons.org/licenses/by-nc-sa/3.0/"><img
alt="Creative Commons License" style="border-width:0"
src="https://i.creativecommons.org/l/by-nc-sa/3.0/88x31.png" /></a>
<br>
<br>
</div>
<!-- Start of StatCounter Code for Default Guide -->
<script type="text/javascript">
var sc_project=10396326;
var sc_invisible=1;
var sc_security="fb5cd679";
var scJsHost = (("https:" == document.location.protocol) ?
"https://secure." : "http://www.");
document.write("<sc"+"ript type='text/javascript' src='" +
scJsHost+
"statcounter.com/counter/counter.js'></"+"script>");
</script>
<noscript><div class="statcounter"><a title="hit counter"
href="http://statcounter.com/" target="_blank"><img
class="statcounter"
src="http://c.statcounter.com/10396326/0/fb5cd679/1/"
alt="hit counter"></a></div></noscript>
<!-- End of StatCounter Code for Default Guide -->

  </body>
</html>